# -*- coding: utf-8 -*-
"""Wellness.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QO8SF1cSrMVwbznO3runlDFsaKsjQ8mj
"""

# ============================================
# Stress & Sleep Quality Predictor
# Full Code with Dataset Normalization (Fixed)
# ============================================

!pip install pandas scikit-learn fpdf matplotlib PyPDF2 --quiet

import pandas as pd
import os
import zipfile
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import MinMaxScaler
from fpdf import FPDF
from PyPDF2 import PdfMerger
import datetime
import matplotlib.pyplot as plt
from google.colab import files

print("âœ… Libraries loaded successfully")

# ============================================
# Step 1: Upload Dataset ZIP Files
# ============================================
print("ðŸ“‚ Please upload the two ZIP files from Kaggle")
uploaded = files.upload()

for filename in uploaded.keys():
    with zipfile.ZipFile(filename, 'r') as zip_ref:
        zip_ref.extractall()

print("âœ… Files extracted")

# ============================================
# Step 2: Load Data
# ============================================
sleep = pd.read_csv("Sleep_health_and_lifestyle_dataset.csv")
stress_candidates = [
    "stress_detection_data.csv",
    "archive (17)/stress_detection_data.csv",
    "archive (17).csv"
]
for candidate in stress_candidates:
    if os.path.exists(candidate):
        stress = pd.read_csv(candidate)
        break

print("âœ… Sleep Dataset Columns:", sleep.columns.tolist())
print("âœ… Stress Dataset Columns:", stress.columns.tolist())

# ============================================
# Step 3: Normalize Data
# ============================================
scaler = MinMaxScaler()

sleep[['Sleep Duration']] = scaler.fit_transform(sleep[['Sleep Duration']])
stress[['Sleep_Duration','Work_Hours']] = scaler.fit_transform(
    stress[['Sleep_Duration','Work_Hours']]
)

print("\nâœ… After Normalization")
print(sleep[['Sleep Duration']].head())
print(stress[['Sleep_Duration','Work_Hours']].head())

# ============================================
# Step 4: Train Models
# ============================================
X_sleep = sleep[['Sleep Duration']]
y_sleep = sleep['Quality of Sleep']
X_train, X_test, y_train, y_test = train_test_split(X_sleep, y_sleep, test_size=0.2, random_state=42)
sleep_model = LogisticRegression(max_iter=1000).fit(X_train, y_train)

X_stress = stress[['Sleep_Duration','Work_Hours']]
y_stress = stress['Stress_Detection']
X_train, X_test, y_train, y_test = train_test_split(X_stress, y_stress, test_size=0.2, random_state=42)
stress_model = DecisionTreeClassifier().fit(X_train, y_train)

# ============================================
# Step 5: Take User Input (Fixed Normalization)
# ============================================
print("\nðŸŒ¿ Welcome to the Stress & Sleep Quality Predictor ðŸŒ¿\n")
sleep_hours = float(input("Enter your average sleep hours per day: "))
work_hours = float(input("Enter your average daily work/study hours: "))

# âœ… Use the same fitted scaler as training data
user_input = scaler.transform([[sleep_hours, work_hours]])
sleep_hours_norm = user_input[0][0]
work_hours_norm = user_input[0][1]

# Predictions
def get_sleep_advice(pred):
    if str(pred).lower() == "poor":
        return "Poor", 10, "Avoid screens before bed, hydrate, and set a fixed bedtime."
    elif str(pred).lower() == "fair":
        return "Fair", 30, "Add 30â€“60 mins more sleep, avoid heavy meals at night."
    else:
        return "Good", 50, "Excellent! Maintain your good sleep habits."

def get_stress_advice(pred):
    if str(pred).lower() == "high":
        return "High", 10, "Practice meditation, reduce caffeine, ensure 8 hours of rest daily."
    elif str(pred).lower() == "medium":
        return "Medium", 30, "Include light exercise, take short breaks, eat balanced meals."
    else:
        return "Low", 50, "Keep up your healthy lifestyle! Maintain a balanced routine."

# âœ… Predict using normalized values
sleep_pred = sleep_model.predict([[sleep_hours_norm]])[0]
stress_pred = stress_model.predict([[sleep_hours_norm, work_hours_norm]])[0]

sleep_status, sleep_score, sleep_advice = get_sleep_advice(sleep_pred)
stress_status, stress_score, stress_advice = get_stress_advice(stress_pred)

total_score = sleep_score + stress_score
wellness_level = "Excellent" if total_score >= 80 else "Moderate" if total_score >= 50 else "Needs Improvement"


# ============================================
# Step 7: Save History
# ============================================
history_file = "wellness_history.csv"
if os.path.exists(history_file):
    history = pd.read_csv(history_file)
else:
    history = pd.DataFrame(columns=["Date", "Sleep Hours", "Work Hours", "Sleep Status", "Stress Status", "Score"])

new_entry = {
    "Date": datetime.date.today().strftime("%Y-%m-%d"),  # âœ… ensure string
    "Sleep Hours": sleep_hours,
    "Work Hours": work_hours,
    "Sleep Status": sleep_pred,
    "Stress Status": stress_pred,
    "Score": total_score
}

history = pd.concat([history, pd.DataFrame([new_entry])], ignore_index=True)
history.to_csv(history_file, index=False)

# ============================================
# Step 8: Create Trend Graph
# ============================================
plt.figure(figsize=(6,4))
plt.plot(history["Date"], history["Score"], marker="o", color="green", label="Wellness Score")
plt.xticks(rotation=45)
plt.xlabel("Date")
plt.ylabel("Score")
plt.title("Wellness Score Trend")
plt.legend()
plt.tight_layout()
plt.savefig("trend_chart.png")
plt.close()

# ============================================
# Step 9: Generate Today's Report
# ============================================
today_report = f"Report_{datetime.date.today()}.pdf"
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", size=12)
pdf.cell(200, 10, txt="Stress & Sleep Quality Report", ln=True, align="C")
pdf.ln(10)
pdf.cell(200, 10, txt=f"Date: {datetime.date.today()}", ln=True)
pdf.cell(200, 10, txt=f"Input: {sleep_hours} sleep hrs, {work_hours} work hrs", ln=True)
pdf.ln(10)

pdf.multi_cell(0, 10, txt=f"Sleep Quality: {sleep_status} ({sleep_score}/50)")
pdf.multi_cell(0, 10, txt=f"Advice: {sleep_advice}")
pdf.multi_cell(0, 10, txt=f"Stress Level: {stress_status} ({stress_score}/50)")
pdf.multi_cell(0, 10, txt=f"Advice: {stress_advice}")
pdf.ln(5)

# Progress Bar
bar_x = 20
bar_y = 120
bar_width = 170
bar_height = 15
fill_width = (total_score / 100) * bar_width

pdf.set_fill_color(200, 200, 200)
pdf.rect(bar_x, bar_y, bar_width, bar_height, 'F')

if total_score >= 80:
    pdf.set_fill_color(0, 200, 0)
elif total_score >= 50:
    pdf.set_fill_color(255, 215, 0)
else:
    pdf.set_fill_color(255, 0, 0)
pdf.rect(bar_x, bar_y, fill_width, bar_height, 'F')

pdf.set_xy(bar_x, bar_y + bar_height + 5)
pdf.cell(0, 10, txt=f"Today's Wellness Score: {total_score}/100 ({wellness_level})", ln=True, align="C")

pdf.image("trend_chart.png", x=30, w=150)
pdf.output(today_report)

# ============================================
# Step 10: Create Portfolio PDF
# ============================================
portfolio_pdf = "Portfolio_Wellness_Reports.pdf"
summary_pdf = "Summary_Report.pdf"

avg_sleep = history["Sleep Hours"].astype(float).mean()
avg_work = history["Work Hours"].astype(float).mean()
avg_score = history["Score"].astype(float).mean()
last_status = history.iloc[-1]["Sleep Status"]
last_stress = history.iloc[-1]["Stress Status"]

summary = FPDF()
summary.add_page()
summary.set_font("Arial", size=14)
summary.cell(200, 10, txt="Wellness Portfolio Summary", ln=True, align="C")
summary.ln(10)
summary.set_font("Arial", size=12)
summary.cell(200, 10, txt=f"Total Records: {len(history)}", ln=True)
summary.cell(200, 10, txt=f"Average Sleep Hours: {avg_sleep:.2f}", ln=True)
summary.cell(200, 10, txt=f"Average Work Hours: {avg_work:.2f}", ln=True)
summary.cell(200, 10, txt=f"Average Wellness Score: {avg_score:.2f}/100", ln=True)
summary.cell(200, 10, txt=f"Last Sleep Status: {last_status}", ln=True)
summary.cell(200, 10, txt=f"Last Stress Status: {last_stress}", ln=True)
summary.ln(10)

bar_x = 20
bar_y = 100
bar_width = 170
bar_height = 15
fill_width = (avg_score / 100) * bar_width

summary.set_fill_color(200, 200, 200)
summary.rect(bar_x, bar_y, bar_width, bar_height, 'F')

if avg_score >= 80:
    summary.set_fill_color(0, 200, 0)
elif avg_score >= 50:
    summary.set_fill_color(255, 215, 0)
else:
    summary.set_fill_color(255, 0, 0)
summary.rect(bar_x, bar_y, fill_width, bar_height, 'F')

summary.set_xy(bar_x, bar_y + bar_height + 5)
summary.cell(0, 10, txt=f"Overall Wellness Progress: {avg_score:.2f}/100", ln=True, align="C")

summary.image("trend_chart.png", x=30, w=150)
summary.output(summary_pdf)

# --- Merge PDFs ---
merger = PdfMerger()
merger.append(summary_pdf)
for file in sorted(os.listdir()):
    if file.startswith("Report_") and file.endswith(".pdf"):
        merger.append(file)
merger.write(portfolio_pdf)
merger.close()

print(f"âœ… Portfolio PDF created: {portfolio_pdf}")
files.download(portfolio_pdf)

"""# New Section

# New Section
"""